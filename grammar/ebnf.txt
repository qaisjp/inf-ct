# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative


program    ::= includerep structdeclrep vardeclrep fundeclrep EOF

include    ::= "#include" STRING_LITERAL
includerep ::= include includerep
             | ε

structdecl ::= structtype "{" vardeclpep "}" ";"    # structure declaration
structdeclrep ::= structdecl structdeclrep
                | ε

vardecl    ::= type IDENT ";"                       # normal declaration, e.g. int a;
             | type IDENT "[" INT_LITERAL "]" ";"   # array declaration, e.g. int a[2];
vardeclrep ::= vardecl vardeclrep
             | ε
vardeclpep ::= vardecl vardeclpep
             | vardecl

fundecl    ::= type IDENT "(" params ")" block      # function declaration
fundeclrep ::= fundecl fundeclrep
             | ε

type       ::= typename
             | typename "*"
typename   ::= "int"
             | "char"
             | "void"
             | structtype

structtype ::= "struct" IDENT

params     ::= type IDENT paramlistrep
             | ε

paramlist  ::= "," type IDENT
paramlistrep ::= paramlist paramlistrep
               | ε

stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt elsestmt        # if then else
             | "return" expopt ";"                   # return
             | exp "=" exp ";"                       # assignment
             | exp ";"                               # expression statement, e.g. a function call
stmtrep    ::= stmt stmtrep
             | ε
elsestmt   ::= "else" stmt
             | ε

block      ::= "{" vardeclrep stmtrep "}"

root_exp   ::= "(" exp ")"
             | IDENT
             | INT_LITERAL
             | CHAR_LITERAL
             | STRING_LITERAL

exp        ::= exp_or
exp_or     ::= exp_and
             | exp_or "||" exp_and
exp_and    ::= exp_eq
             | exp_and "&&" exp_eq
exp_eq     ::= exp_rel
             | exp_eq "!=" exp_rel
             | exp_eq "==" exp_rel
exp_rel    ::= exp_add
             | exp_rel ">=" exp_add
             | exp_rel ">" exp_add
             | exp_rel "<=" exp_add
             | exp_rel ">" exp_add
exp_add    ::= exp_mult
             | exp_add "-" exp_mult
             | exp_add "+" exp_mult
exp_mult   ::= exp_unary
             | exp_mult "%" exp_unary
             | exp_mult "/" exp_unary
             | exp_mult "*" exp_unary
exp_unary  ::= exp_postfix
             | "sizeof" "(" type ")" exp_unary
             | "*" exp_unary
             | "(" type ")" exp_unary
             | "-" exp_unary
exp_post   ::= root_exp
             | exp_post "." IDENT
             | exp_post "[" exp "]"
             | exp_post "(" arglist ")"
             | exp_post "(" ")"


expopt     ::= exp
             | ε

funcall      ::= IDENT "(" ")"
               | IDENT "(" arglist ")"
arglist      ::= exp argrep
argrep       ::= "," exp argrep
               | ε

arrayaccess  ::= exp "[" exp "]"                  # array access
fieldaccess  ::= exp "." IDENT                    # structure field member access
valueat      ::= "*" exp                          # Value at operator (pointer indirection)
sizeof       ::= "sizeof" "(" type ")"            # size of type
typecast     ::= "(" type ")" exp                 # type casting


