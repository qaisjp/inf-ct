# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative


program    ::= includerep structdeclrep vardeclrep fundeclrep EOF

include    ::= "#include" STRING_LITERAL
includerep ::= include includerep
             | ε

structdecl ::= structtype "{" vardeclpep "}" ";"    # structure declaration
structdeclrep ::= structdecl structdeclrep
                | ε

vardecl    ::= type IDENT ";"                       # normal declaration, e.g. int a;
             | type IDENT "[" INT_LITERAL "]" ";"   # array declaration, e.g. int a[2];
vardeclrep ::= vardecl vardeclrep
             | ε
vardeclpep ::= vardecl vardeclpep
             | vardecl

fundecl    ::= type IDENT "(" params ")" block      # function declaration
fundeclrep ::= fundecl fundeclrep
             | ε

type       ::= typename
             | typename "*"
typename   ::= "int"
             | "char"
             | "void"
             | structtype

structtype ::= "struct" IDENT

params     ::= type IDENT paramlistrep
             | ε

paramlist  ::= "," type IDENT
paramlistrep ::= paramlist paramlistrep
               | ε

stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt elsestmt        # if then else
             | "return" expopt ";"                   # return
             | exp "=" exp ";"                       # assignment
             | exp ";"                               # expression statement, e.g. a function call
stmtrep    ::= stmt stmtrep
             | ε
elsestmt   ::= "else" stmt
             | ε

block      ::= "{" vardeclrep stmtrep "}"

root_exp   ::= "(" exp ")"
             | IDENT
             | INT_LITERAL
             | CHAR_LITERAL
             | STRING_LITERAL
             | IDENT "(" ")"
             | IDENT "(" arglist ")"

arglist      ::= exp argrep
argrep       ::= "," exp argrep
               | ε

exp        ::= exp_or
exp_or     ::= exp_and exp_or_
exp_or_    ::= "||" exp_and exp_or_
             | ε
exp_and    ::= exp_eq exp_and_
exp_and_   ::= "&&" exp_eq exp_and_
             | ε
exp_eq     ::= exp_rel exp_eq_
exp_eq_    ::= "!=" exp_rel exp_eq_
             | "==" exp_rel exp_eq_
             | ε
exp_rel    ::= exp_add exp_rel_
exp_rel_   ::= ">=" exp_add exp_rel_
             | ">" exp_add exp_rel_
             | "<=" exp_add exp_rel_
             | "<" exp_add exp_rel_
             | ε
exp_add    ::= exp_mult exp_add_
exp_add_   ::= "-" exp_mult exp_add_
             | "+" exp_mult exp_add_
             | ε
exp_mult   ::= exp_unary exp_mult_
exp_mult_  ::= "%" exp_unary exp_mult_
             | "/" exp_unary exp_mult_
             | "*" exp_unary exp_mult_
             | ε
exp_unary  ::= exp_post
             | "sizeof" "(" type ")" exp_unary    # size of type
             | "*" exp_unary                      # Value at operator (pointer indirection)
             | "(" type ")" exp_unary             # type casting
             | "-" exp_unary

# IMPORTANT!!!!!!!!!!!!!!!!!!!!!!!!!!
# It is possible you have messed up funcall here!!
#
# Do you think funcall could be moved to rootexp?
# See [master f16a5e0] grammar: refactor funcall into rootexp
#
exp_post   ::= root_exp exp_post_
exp_post_  ::=
             | "." IDENT exp_post_                 # structure field member access
             | "[" exp "]" exp_post_               # array access
             | ε


expopt     ::= exp
             | ε
